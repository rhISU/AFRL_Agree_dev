grammar com.rockwellcollins.atc.agree.Agree with org.osate.xtext.aadl2.properties.Properties

generate agree "http://www.rockwellcollins.com/atc/agree/Agree"

import "http://aadl.info/AADL/2.0" as aadl2
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

NamedElement returns aadl2::NamedElement:
	Arg
	| FnDefExpr
	| PropertyStatement
	| ConstStatement
	| NodeDefExpr
	| RecordDefExpr;

Element returns aadl2::Element:
	Expr
	| Type
	| AgreeContract
	| SpecStatement
	| NodeStmt
	| NodeBodyExpr
	| EqStatement;

//Namespace returns aadl2::Namespace:
//	NodeDefExpr;

AnnexLibrary returns aadl2::AnnexLibrary:
	AgreeLibrary;

AnnexSubclause returns aadl2::AnnexSubclause:
	AgreeSubclause;

AgreeLibrary:
	{AgreeContractLibrary} contract=AgreeContract;

AgreeSubclause:
	{AgreeContractSubclause} contract=AgreeContract;

AgreeContract returns Contract:
	{AgreeContract} (specs+=SpecStatement)+;

SpecStatement:
	{AssumeStatement} 'assume' str=STRING ':' expr=Expr ';'
	| {GuaranteeStatement} 'guarantee' str=STRING ':' expr=Expr ';'
	| {AssertStatement} 'assert' (str=STRING ':')? expr=Expr ';'
	| {InitialStatement} 'initially' ':' expr = Expr ';'
	| {ParamStatement} 'parameter' expr=Expr ':' type=Type ';'
	| {LemmaStatement} 'lemma' str=STRING ':' expr=Expr ';'
	| {LiftStatement} 'lift' subcomp=NestedDotID ';'
	| {ConnectionStatement} 'connection' conn=[aadl2::NamedElement] ':' expr=Expr ';'
	| SynchStatement
	| OrderStatement
	| PropertyStatement
	| ConstStatement
	| EqStatement
	| FnDefExpr
	| NodeDefExpr
	| RecordDefExpr;

SynchStatement:
	{SynchStatement} 'synchrony' ':' val = INTEGER_LIT (',' val2=INTEGER_LIT)? (sim=('simult'|'no_simult'))? ';'
|	{MNSynchStatement} 'synchrony' ':' (comp1+=[aadl2::NamedElement] ',' comp2+=[aadl2::NamedElement] ':' max+=INTEGER_LIT ',' min+=INTEGER_LIT)+ ';'
|   {CalenStatement} 'calendar' ':' els+=([aadl2::NamedElement]) ("," els+=[aadl2::NamedElement])*  ';'
|   {AsynchStatement} 'synchrony' ':' 'asynchronous' ';'
|   {LatchedStatement} 'synchrony' ':' 'latched' ';'
;

OrderStatement:
	'ordering' ':' comps += [aadl2::NamedElement] ("," comps+=[aadl2::NamedElement])* ';'
;

NamedCallDef returns aadl2::NamedElement:
	CallDef;

CallDef returns CallDef:
	FnDefExpr
	| NodeDefExpr;

PropertyStatement:
	'property' name=ID '=' expr=Expr ';';

ConstStatement:
	'const' name=ID ':' type=Type '=' expr=Expr ';'; //this should really be an "Arg"

EqStatement:
	'eq' (lhs+=Arg (',' lhs+=Arg)*) ('=' expr=Expr)? ';';

FnDefExpr:
	'fun' name=ID '(' args+=Arg (',' args+=Arg)* ')' ':' type=Type '=' expr=Expr ';';

NodeDefExpr:
	'node' name=ID '(' (args+=Arg (',' args+=Arg)*)? ')' 'returns'
	'(' (rets+=Arg (',' rets+=Arg)*)? ')' ';'
	nodeBody=NodeBodyExpr;

NodeBodyExpr:
	('var' (locs+=Arg ';')+)?
	'let'
	(stmts+=NodeStmt)+
	'tel' ';';

NodeStmt:
	{NodeEq} lhs+=[Arg] (',' lhs+=[Arg])* '=' expr=Expr ';'
	| {NodeLemma} 'lemma' str=STRING ':' expr=Expr ';';

Arg returns Arg:
	name=ID ':' type=Type;

Type returns Type:
	{PrimType} string=primTypes ('[' (lowNeg='-')? rangeLow=(INTEGER_LIT|REAL_LIT) ',' (highNeg='-')? rangeHigh=(INTEGER_LIT|REAL_LIT) ']')?
|	{RecordType} record=NestedDotID
;

primTypes:
  'real' | 'bool' | 'int';

RecordDefExpr:
	'type' name=ID '=' 'struct' '{' (args+=Arg (',' args+=Arg)*) '}' ';'
;

Expr returns Expr:
	ArrowExpr;

ArrowExpr returns Expr:
	ImpliesExpr (=> ({BinaryExpr.left=current} op='->') right=ArrowExpr)?;

ImpliesExpr returns Expr:
	EquivExpr (=> ({BinaryExpr.left=current} op='=>') right=ImpliesExpr)?;

EquivExpr returns Expr:
	OrExpr (=> ({BinaryExpr.left=current} op='<=>') right=OrExpr)?;

OrExpr returns Expr:
	AndExpr (=> ({BinaryExpr.left=current} op='or') right=AndExpr)*;

AndExpr returns Expr:
	RelateExpr (=> ({BinaryExpr.left=current} op='and') right=RelateExpr)*;

RelateOp:
	'<' | '<=' | '>' | '>=' | '=' | '<>' | '!='; //todo remove `<>'

RelateExpr returns Expr:
	AddSubExpr (=> ({BinaryExpr.left=current} op=RelateOp) right=AddSubExpr)?;

AddSubExpr returns Expr:
	MultDivExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=MultDivExpr)*;

MultDivExpr returns Expr:
	UnaryExpr (=> ({BinaryExpr.left=current} op=('*' | '/' | 'div' | 'mod')) right=UnaryExpr)*;//todo remove div

UnaryExpr returns Expr:
	{UnaryExpr} op=('-' | 'not') expr=UnaryExpr
	| IfThenElseExpr;

IfThenElseExpr returns Expr:
	{IfThenElseExpr} 'if' a=Expr 'then' b=Expr 'else' c=Expr
	| PreDefFnExpr;

PreDefFnExpr returns Expr:
	{PrevExpr} 'prev' '(' delay=Expr ',' init=Expr ')'
	| {GetPropertyExpr} 'Get_Property' '(' component=Expr ',' prop=[aadl2::NamedElement|QCLREF] ')'
	| RecordUpdateExpr;

RecordUpdateExpr returns Expr:
	TermExpr (=> ({RecordUpdateExpr.record=current} ('{' args+=[aadl2::NamedElement|ID] ':=' argExpr+=Expr '}')+))?
;

TermExpr returns Expr:
	  ComplexExpr
	| {IntLitExpr} val=INTEGER_LIT
	| {PreExpr} 'pre' '(' expr=Expr ')'
	| {EventExpr} 'event' '(' id = NestedDotID ')'
	| {RealLitExpr} val=REAL_LIT
	| {BoolLitExpr} val=BooleanLiteral
	| {ThisExpr} 'this' ('.' subThis=NestedDotID)?
	| {FloorCast} 'floor' '(' expr=Expr ')'
	| {RealCast}  'real' '(' expr=Expr ')'
	| '(' Expr ')';
	

ComplexExpr:
	NestedDotID 
		(=> ({FnCallExpr.fn=current} '(') (args+=Expr (',' args+=Expr)*)? ')' 
		|=> ({RecordExpr.record=current} '{' args+=[aadl2::NamedElement|ID] '=') argExpr+=Expr (';' args+=[aadl2::NamedElement|ID] '=' argExpr+=Expr)* '}'
		)?
;

NestedDotID:
	base=[aadl2::NamedElement|QCPREF] (=> ('.' (( tag=ReservedVarTag) | sub=NestedDotID)))?;

QCPREF:
	=>(ID '::') ID =>('.' ID)?
|	ID;
	
ReservedVarTag:
	'_REMOVE'
|	'_INSERT'
|	'_COUNT'
|   '_CLK';

	
