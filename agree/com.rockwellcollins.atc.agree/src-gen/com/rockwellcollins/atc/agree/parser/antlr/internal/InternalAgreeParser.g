/*
 * generated by Xtext
 */
parser grammar InternalAgreeParser;

options {
	tokenVocab=InternalAgreeLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package com.rockwellcollins.atc.agree.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.rockwellcollins.atc.agree.services.AgreeGrammarAccess;

}

@members {


	private AgreeGrammarAccess grammarAccess;
	 	
	public InternalAgreeParser(TokenStream input, AgreeGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "NamedElement";	
	} 
	   	   	
	@Override
	protected AgreeGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleNamedElement
entryRuleNamedElement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNamedElementRule()); }
	 iv_ruleNamedElement=ruleNamedElement 
	 { $current=$iv_ruleNamedElement.current; } 
	 EOF 
;

// Rule NamedElement
ruleNamedElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNamedElementAccess().getArgParserRuleCall_0()); 
    }
    this_Arg_0=ruleArg
    {
        $current = $this_Arg_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNamedElementAccess().getFnDefExprParserRuleCall_1()); 
    }
    this_FnDefExpr_1=ruleFnDefExpr
    {
        $current = $this_FnDefExpr_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNamedElementAccess().getPropertyStatementParserRuleCall_2()); 
    }
    this_PropertyStatement_2=rulePropertyStatement
    {
        $current = $this_PropertyStatement_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNamedElementAccess().getConstStatementParserRuleCall_3()); 
    }
    this_ConstStatement_3=ruleConstStatement
    {
        $current = $this_ConstStatement_3.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNamedElementAccess().getNodeDefExprParserRuleCall_4()); 
    }
    this_NodeDefExpr_4=ruleNodeDefExpr
    {
        $current = $this_NodeDefExpr_4.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNamedElementAccess().getRecordDefExprParserRuleCall_5()); 
    }
    this_RecordDefExpr_5=ruleRecordDefExpr
    {
        $current = $this_RecordDefExpr_5.current;
        afterParserOrEnumRuleCall();
    }
)
;











// Entry rule entryRuleAgreeLibrary
entryRuleAgreeLibrary returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAgreeLibraryRule()); }
	 iv_ruleAgreeLibrary=ruleAgreeLibrary 
	 { $current=$iv_ruleAgreeLibrary.current; } 
	 EOF 
;

// Rule AgreeLibrary
ruleAgreeLibrary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAgreeLibraryAccess().getAgreeContractLibraryAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAgreeLibraryAccess().getContractAgreeContractParserRuleCall_1_0()); 
	    }
		lv_contract_1_0=ruleAgreeContract		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgreeLibraryRule());
	        }
       		set(
       			$current, 
       			"contract",
        		lv_contract_1_0, 
        		"AgreeContract");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAgreeSubclause
entryRuleAgreeSubclause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAgreeSubclauseRule()); }
	 iv_ruleAgreeSubclause=ruleAgreeSubclause 
	 { $current=$iv_ruleAgreeSubclause.current; } 
	 EOF 
;

// Rule AgreeSubclause
ruleAgreeSubclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAgreeSubclauseAccess().getAgreeContractSubclauseAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAgreeSubclauseAccess().getContractAgreeContractParserRuleCall_1_0()); 
	    }
		lv_contract_1_0=ruleAgreeContract		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgreeSubclauseRule());
	        }
       		set(
       			$current, 
       			"contract",
        		lv_contract_1_0, 
        		"AgreeContract");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAgreeContract
entryRuleAgreeContract returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAgreeContractRule()); }
	 iv_ruleAgreeContract=ruleAgreeContract 
	 { $current=$iv_ruleAgreeContract.current; } 
	 EOF 
;

// Rule AgreeContract
ruleAgreeContract returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAgreeContractAccess().getAgreeContractAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAgreeContractAccess().getSpecsSpecStatementParserRuleCall_1_0()); 
	    }
		lv_specs_1_0=ruleSpecStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgreeContractRule());
	        }
       		add(
       			$current, 
       			"specs",
        		lv_specs_1_0, 
        		"SpecStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleSpecStatement
entryRuleSpecStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSpecStatementRule()); }
	 iv_ruleSpecStatement=ruleSpecStatement 
	 { $current=$iv_ruleSpecStatement.current; } 
	 EOF 
;

// Rule SpecStatement
ruleSpecStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpecStatementAccess().getAssumeStatementAction_0_0(),
            $current);
    }
)
	otherlv_1=Assume
    {
    	newLeafNode(otherlv_1, grammarAccess.getSpecStatementAccess().getAssumeKeyword_0_1());
    }
(
(
		lv_str_2_0=RULE_STRING
		{
			newLeafNode(lv_str_2_0, grammarAccess.getSpecStatementAccess().getStrSTRINGTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"str",
        		lv_str_2_0, 
        		"STRING");
	    }

)
)
	otherlv_3=Colon
    {
    	newLeafNode(otherlv_3, grammarAccess.getSpecStatementAccess().getColonKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecStatementAccess().getExprExprParserRuleCall_0_4_0()); 
	    }
		lv_expr_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=Semicolon
    {
    	newLeafNode(otherlv_5, grammarAccess.getSpecStatementAccess().getSemicolonKeyword_0_5());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpecStatementAccess().getGuaranteeStatementAction_1_0(),
            $current);
    }
)
	otherlv_7=Guarantee
    {
    	newLeafNode(otherlv_7, grammarAccess.getSpecStatementAccess().getGuaranteeKeyword_1_1());
    }
(
(
		lv_str_8_0=RULE_STRING
		{
			newLeafNode(lv_str_8_0, grammarAccess.getSpecStatementAccess().getStrSTRINGTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"str",
        		lv_str_8_0, 
        		"STRING");
	    }

)
)
	otherlv_9=Colon
    {
    	newLeafNode(otherlv_9, grammarAccess.getSpecStatementAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecStatementAccess().getExprExprParserRuleCall_1_4_0()); 
	    }
		lv_expr_10_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_10_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_11=Semicolon
    {
    	newLeafNode(otherlv_11, grammarAccess.getSpecStatementAccess().getSemicolonKeyword_1_5());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpecStatementAccess().getAssertStatementAction_2_0(),
            $current);
    }
)
	otherlv_13=Assert
    {
    	newLeafNode(otherlv_13, grammarAccess.getSpecStatementAccess().getAssertKeyword_2_1());
    }
((
(
		lv_str_14_0=RULE_STRING
		{
			newLeafNode(lv_str_14_0, grammarAccess.getSpecStatementAccess().getStrSTRINGTerminalRuleCall_2_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"str",
        		lv_str_14_0, 
        		"STRING");
	    }

)
)
	otherlv_15=Colon
    {
    	newLeafNode(otherlv_15, grammarAccess.getSpecStatementAccess().getColonKeyword_2_2_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecStatementAccess().getExprExprParserRuleCall_2_3_0()); 
	    }
		lv_expr_16_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_16_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_17=Semicolon
    {
    	newLeafNode(otherlv_17, grammarAccess.getSpecStatementAccess().getSemicolonKeyword_2_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpecStatementAccess().getInitialStatementAction_3_0(),
            $current);
    }
)
	otherlv_19=Initially
    {
    	newLeafNode(otherlv_19, grammarAccess.getSpecStatementAccess().getInitiallyKeyword_3_1());
    }

	otherlv_20=Colon
    {
    	newLeafNode(otherlv_20, grammarAccess.getSpecStatementAccess().getColonKeyword_3_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecStatementAccess().getExprExprParserRuleCall_3_3_0()); 
	    }
		lv_expr_21_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_21_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_22=Semicolon
    {
    	newLeafNode(otherlv_22, grammarAccess.getSpecStatementAccess().getSemicolonKeyword_3_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpecStatementAccess().getParamStatementAction_4_0(),
            $current);
    }
)
	otherlv_24=Parameter
    {
    	newLeafNode(otherlv_24, grammarAccess.getSpecStatementAccess().getParameterKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecStatementAccess().getExprExprParserRuleCall_4_2_0()); 
	    }
		lv_expr_25_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_25_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_26=Colon
    {
    	newLeafNode(otherlv_26, grammarAccess.getSpecStatementAccess().getColonKeyword_4_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecStatementAccess().getTypeTypeParserRuleCall_4_4_0()); 
	    }
		lv_type_27_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_27_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_28=Semicolon
    {
    	newLeafNode(otherlv_28, grammarAccess.getSpecStatementAccess().getSemicolonKeyword_4_5());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpecStatementAccess().getLemmaStatementAction_5_0(),
            $current);
    }
)
	otherlv_30=Lemma
    {
    	newLeafNode(otherlv_30, grammarAccess.getSpecStatementAccess().getLemmaKeyword_5_1());
    }
(
(
		lv_str_31_0=RULE_STRING
		{
			newLeafNode(lv_str_31_0, grammarAccess.getSpecStatementAccess().getStrSTRINGTerminalRuleCall_5_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"str",
        		lv_str_31_0, 
        		"STRING");
	    }

)
)
	otherlv_32=Colon
    {
    	newLeafNode(otherlv_32, grammarAccess.getSpecStatementAccess().getColonKeyword_5_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecStatementAccess().getExprExprParserRuleCall_5_4_0()); 
	    }
		lv_expr_33_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_33_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_34=Semicolon
    {
    	newLeafNode(otherlv_34, grammarAccess.getSpecStatementAccess().getSemicolonKeyword_5_5());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpecStatementAccess().getLiftStatementAction_6_0(),
            $current);
    }
)
	otherlv_36=Lift
    {
    	newLeafNode(otherlv_36, grammarAccess.getSpecStatementAccess().getLiftKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecStatementAccess().getSubcompNestedDotIDParserRuleCall_6_2_0()); 
	    }
		lv_subcomp_37_0=ruleNestedDotID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecStatementRule());
	        }
       		set(
       			$current, 
       			"subcomp",
        		lv_subcomp_37_0, 
        		"NestedDotID");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_38=Semicolon
    {
    	newLeafNode(otherlv_38, grammarAccess.getSpecStatementAccess().getSemicolonKeyword_6_3());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpecStatementAccess().getConnectionStatementAction_7_0(),
            $current);
    }
)
	otherlv_40=Connection
    {
    	newLeafNode(otherlv_40, grammarAccess.getSpecStatementAccess().getConnectionKeyword_7_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecStatementRule());
	        }
        }
	otherlv_41=RULE_ID
	{
		newLeafNode(otherlv_41, grammarAccess.getSpecStatementAccess().getConnNamedElementCrossReference_7_2_0()); 
	}

)
)
	otherlv_42=Colon
    {
    	newLeafNode(otherlv_42, grammarAccess.getSpecStatementAccess().getColonKeyword_7_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecStatementAccess().getExprExprParserRuleCall_7_4_0()); 
	    }
		lv_expr_43_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_43_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_44=Semicolon
    {
    	newLeafNode(otherlv_44, grammarAccess.getSpecStatementAccess().getSemicolonKeyword_7_5());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getSpecStatementAccess().getSynchStatementParserRuleCall_8()); 
    }
    this_SynchStatement_45=ruleSynchStatement
    {
        $current = $this_SynchStatement_45.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpecStatementAccess().getOrderStatementParserRuleCall_9()); 
    }
    this_OrderStatement_46=ruleOrderStatement
    {
        $current = $this_OrderStatement_46.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpecStatementAccess().getPropertyStatementParserRuleCall_10()); 
    }
    this_PropertyStatement_47=rulePropertyStatement
    {
        $current = $this_PropertyStatement_47.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpecStatementAccess().getConstStatementParserRuleCall_11()); 
    }
    this_ConstStatement_48=ruleConstStatement
    {
        $current = $this_ConstStatement_48.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpecStatementAccess().getEqStatementParserRuleCall_12()); 
    }
    this_EqStatement_49=ruleEqStatement
    {
        $current = $this_EqStatement_49.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpecStatementAccess().getFnDefExprParserRuleCall_13()); 
    }
    this_FnDefExpr_50=ruleFnDefExpr
    {
        $current = $this_FnDefExpr_50.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpecStatementAccess().getNodeDefExprParserRuleCall_14()); 
    }
    this_NodeDefExpr_51=ruleNodeDefExpr
    {
        $current = $this_NodeDefExpr_51.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpecStatementAccess().getRecordDefExprParserRuleCall_15()); 
    }
    this_RecordDefExpr_52=ruleRecordDefExpr
    {
        $current = $this_RecordDefExpr_52.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSynchStatement
entryRuleSynchStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSynchStatementRule()); }
	 iv_ruleSynchStatement=ruleSynchStatement 
	 { $current=$iv_ruleSynchStatement.current; } 
	 EOF 
;

// Rule SynchStatement
ruleSynchStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSynchStatementAccess().getSynchStatementAction_0_0(),
            $current);
    }
)
	otherlv_1=Synchrony
    {
    	newLeafNode(otherlv_1, grammarAccess.getSynchStatementAccess().getSynchronyKeyword_0_1());
    }

	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getSynchStatementAccess().getColonKeyword_0_2());
    }
(
(
		lv_val_3_0=RULE_INTEGER_LIT
		{
			newLeafNode(lv_val_3_0, grammarAccess.getSynchStatementAccess().getValINTEGER_LITTerminalRuleCall_0_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSynchStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_3_0, 
        		"INTEGER_LIT");
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getSynchStatementAccess().getCommaKeyword_0_4_0());
    }
(
(
		lv_val2_5_0=RULE_INTEGER_LIT
		{
			newLeafNode(lv_val2_5_0, grammarAccess.getSynchStatementAccess().getVal2INTEGER_LITTerminalRuleCall_0_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSynchStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val2",
        		lv_val2_5_0, 
        		"INTEGER_LIT");
	    }

)
))?(
(
(
		lv_sim_6_1=
	Simult
    {
        newLeafNode(lv_sim_6_1, grammarAccess.getSynchStatementAccess().getSimSimultKeyword_0_5_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSynchStatementRule());
	        }
       		setWithLastConsumed($current, "sim", lv_sim_6_1, null);
	    }

    |		lv_sim_6_2=
	No_simult
    {
        newLeafNode(lv_sim_6_2, grammarAccess.getSynchStatementAccess().getSimNo_simultKeyword_0_5_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSynchStatementRule());
	        }
       		setWithLastConsumed($current, "sim", lv_sim_6_2, null);
	    }

)

)
)?
	otherlv_7=Semicolon
    {
    	newLeafNode(otherlv_7, grammarAccess.getSynchStatementAccess().getSemicolonKeyword_0_6());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSynchStatementAccess().getMNSynchStatementAction_1_0(),
            $current);
    }
)
	otherlv_9=Synchrony
    {
    	newLeafNode(otherlv_9, grammarAccess.getSynchStatementAccess().getSynchronyKeyword_1_1());
    }

	otherlv_10=Colon
    {
    	newLeafNode(otherlv_10, grammarAccess.getSynchStatementAccess().getColonKeyword_1_2());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSynchStatementRule());
	        }
        }
	otherlv_11=RULE_ID
	{
		newLeafNode(otherlv_11, grammarAccess.getSynchStatementAccess().getComp1NamedElementCrossReference_1_3_0_0()); 
	}

)
)
	otherlv_12=Comma
    {
    	newLeafNode(otherlv_12, grammarAccess.getSynchStatementAccess().getCommaKeyword_1_3_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSynchStatementRule());
	        }
        }
	otherlv_13=RULE_ID
	{
		newLeafNode(otherlv_13, grammarAccess.getSynchStatementAccess().getComp2NamedElementCrossReference_1_3_2_0()); 
	}

)
)
	otherlv_14=Colon
    {
    	newLeafNode(otherlv_14, grammarAccess.getSynchStatementAccess().getColonKeyword_1_3_3());
    }
(
(
		lv_max_15_0=RULE_INTEGER_LIT
		{
			newLeafNode(lv_max_15_0, grammarAccess.getSynchStatementAccess().getMaxINTEGER_LITTerminalRuleCall_1_3_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSynchStatementRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"max",
        		lv_max_15_0, 
        		"INTEGER_LIT");
	    }

)
)
	otherlv_16=Comma
    {
    	newLeafNode(otherlv_16, grammarAccess.getSynchStatementAccess().getCommaKeyword_1_3_5());
    }
(
(
		lv_min_17_0=RULE_INTEGER_LIT
		{
			newLeafNode(lv_min_17_0, grammarAccess.getSynchStatementAccess().getMinINTEGER_LITTerminalRuleCall_1_3_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSynchStatementRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"min",
        		lv_min_17_0, 
        		"INTEGER_LIT");
	    }

)
))+
	otherlv_18=Semicolon
    {
    	newLeafNode(otherlv_18, grammarAccess.getSynchStatementAccess().getSemicolonKeyword_1_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSynchStatementAccess().getCalenStatementAction_2_0(),
            $current);
    }
)
	otherlv_20=Calendar
    {
    	newLeafNode(otherlv_20, grammarAccess.getSynchStatementAccess().getCalendarKeyword_2_1());
    }

	otherlv_21=Colon
    {
    	newLeafNode(otherlv_21, grammarAccess.getSynchStatementAccess().getColonKeyword_2_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSynchStatementRule());
	        }
        }
	otherlv_22=RULE_ID
	{
		newLeafNode(otherlv_22, grammarAccess.getSynchStatementAccess().getElsNamedElementCrossReference_2_3_0()); 
	}

)
)(
	otherlv_23=Comma
    {
    	newLeafNode(otherlv_23, grammarAccess.getSynchStatementAccess().getCommaKeyword_2_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSynchStatementRule());
	        }
        }
	otherlv_24=RULE_ID
	{
		newLeafNode(otherlv_24, grammarAccess.getSynchStatementAccess().getElsNamedElementCrossReference_2_4_1_0()); 
	}

)
))*
	otherlv_25=Semicolon
    {
    	newLeafNode(otherlv_25, grammarAccess.getSynchStatementAccess().getSemicolonKeyword_2_5());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSynchStatementAccess().getAsynchStatementAction_3_0(),
            $current);
    }
)
	otherlv_27=Synchrony
    {
    	newLeafNode(otherlv_27, grammarAccess.getSynchStatementAccess().getSynchronyKeyword_3_1());
    }

	otherlv_28=Colon
    {
    	newLeafNode(otherlv_28, grammarAccess.getSynchStatementAccess().getColonKeyword_3_2());
    }

	otherlv_29=Asynchronous
    {
    	newLeafNode(otherlv_29, grammarAccess.getSynchStatementAccess().getAsynchronousKeyword_3_3());
    }

	otherlv_30=Semicolon
    {
    	newLeafNode(otherlv_30, grammarAccess.getSynchStatementAccess().getSemicolonKeyword_3_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSynchStatementAccess().getLatchedStatementAction_4_0(),
            $current);
    }
)
	otherlv_32=Synchrony
    {
    	newLeafNode(otherlv_32, grammarAccess.getSynchStatementAccess().getSynchronyKeyword_4_1());
    }

	otherlv_33=Colon
    {
    	newLeafNode(otherlv_33, grammarAccess.getSynchStatementAccess().getColonKeyword_4_2());
    }

	otherlv_34=Latched
    {
    	newLeafNode(otherlv_34, grammarAccess.getSynchStatementAccess().getLatchedKeyword_4_3());
    }

	otherlv_35=Semicolon
    {
    	newLeafNode(otherlv_35, grammarAccess.getSynchStatementAccess().getSemicolonKeyword_4_4());
    }
))
;





// Entry rule entryRuleOrderStatement
entryRuleOrderStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrderStatementRule()); }
	 iv_ruleOrderStatement=ruleOrderStatement 
	 { $current=$iv_ruleOrderStatement.current; } 
	 EOF 
;

// Rule OrderStatement
ruleOrderStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Ordering
    {
    	newLeafNode(otherlv_0, grammarAccess.getOrderStatementAccess().getOrderingKeyword_0());
    }

	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getOrderStatementAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrderStatementRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getOrderStatementAccess().getCompsNamedElementCrossReference_2_0()); 
	}

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getOrderStatementAccess().getCommaKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrderStatementRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getOrderStatementAccess().getCompsNamedElementCrossReference_3_1_0()); 
	}

)
))*
	otherlv_5=Semicolon
    {
    	newLeafNode(otherlv_5, grammarAccess.getOrderStatementAccess().getSemicolonKeyword_4());
    }
)
;







// Entry rule entryRuleCallDef
entryRuleCallDef returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCallDefRule()); }
	 iv_ruleCallDef=ruleCallDef 
	 { $current=$iv_ruleCallDef.current; } 
	 EOF 
;

// Rule CallDef
ruleCallDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCallDefAccess().getFnDefExprParserRuleCall_0()); 
    }
    this_FnDefExpr_0=ruleFnDefExpr
    {
        $current = $this_FnDefExpr_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCallDefAccess().getNodeDefExprParserRuleCall_1()); 
    }
    this_NodeDefExpr_1=ruleNodeDefExpr
    {
        $current = $this_NodeDefExpr_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePropertyStatement
entryRulePropertyStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPropertyStatementRule()); }
	 iv_rulePropertyStatement=rulePropertyStatement 
	 { $current=$iv_rulePropertyStatement.current; } 
	 EOF 
;

// Rule PropertyStatement
rulePropertyStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Property
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropertyStatementAccess().getPropertyKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPropertyStatementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
	otherlv_2=EqualsSign
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyStatementAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyStatementAccess().getExprExprParserRuleCall_3_0()); 
	    }
		lv_expr_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getPropertyStatementAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleConstStatement
entryRuleConstStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstStatementRule()); }
	 iv_ruleConstStatement=ruleConstStatement 
	 { $current=$iv_ruleConstStatement.current; } 
	 EOF 
;

// Rule ConstStatement
ruleConstStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Const
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstStatementAccess().getConstKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstStatementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstStatementAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstStatementAccess().getTypeTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=EqualsSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstStatementAccess().getEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstStatementAccess().getExprExprParserRuleCall_5_0()); 
	    }
		lv_expr_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_5_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getConstStatementAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleEqStatement
entryRuleEqStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEqStatementRule()); }
	 iv_ruleEqStatement=ruleEqStatement 
	 { $current=$iv_ruleEqStatement.current; } 
	 EOF 
;

// Rule EqStatement
ruleEqStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Eq
    {
    	newLeafNode(otherlv_0, grammarAccess.getEqStatementAccess().getEqKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getEqStatementAccess().getLhsArgParserRuleCall_1_0_0()); 
	    }
		lv_lhs_1_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqStatementRule());
	        }
       		add(
       			$current, 
       			"lhs",
        		lv_lhs_1_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=Comma
    {
    	newLeafNode(otherlv_2, grammarAccess.getEqStatementAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEqStatementAccess().getLhsArgParserRuleCall_1_1_1_0()); 
	    }
		lv_lhs_3_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqStatementRule());
	        }
       		add(
       			$current, 
       			"lhs",
        		lv_lhs_3_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
))*)(
	otherlv_4=EqualsSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getEqStatementAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEqStatementAccess().getExprExprParserRuleCall_2_1_0()); 
	    }
		lv_expr_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_5_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getEqStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleFnDefExpr
entryRuleFnDefExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFnDefExprRule()); }
	 iv_ruleFnDefExpr=ruleFnDefExpr 
	 { $current=$iv_ruleFnDefExpr.current; } 
	 EOF 
;

// Rule FnDefExpr
ruleFnDefExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Fun
    {
    	newLeafNode(otherlv_0, grammarAccess.getFnDefExprAccess().getFunKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFnDefExprAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnDefExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getFnDefExprAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFnDefExprAccess().getArgsArgParserRuleCall_3_0()); 
	    }
		lv_args_3_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnDefExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getFnDefExprAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFnDefExprAccess().getArgsArgParserRuleCall_4_1_0()); 
	    }
		lv_args_5_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnDefExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getFnDefExprAccess().getRightParenthesisKeyword_5());
    }

	otherlv_7=Colon
    {
    	newLeafNode(otherlv_7, grammarAccess.getFnDefExprAccess().getColonKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFnDefExprAccess().getTypeTypeParserRuleCall_7_0()); 
	    }
		lv_type_8_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnDefExprRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_8_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_9=EqualsSign
    {
    	newLeafNode(otherlv_9, grammarAccess.getFnDefExprAccess().getEqualsSignKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFnDefExprAccess().getExprExprParserRuleCall_9_0()); 
	    }
		lv_expr_10_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnDefExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_10_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_11=Semicolon
    {
    	newLeafNode(otherlv_11, grammarAccess.getFnDefExprAccess().getSemicolonKeyword_10());
    }
)
;





// Entry rule entryRuleNodeDefExpr
entryRuleNodeDefExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNodeDefExprRule()); }
	 iv_ruleNodeDefExpr=ruleNodeDefExpr 
	 { $current=$iv_ruleNodeDefExpr.current; } 
	 EOF 
;

// Rule NodeDefExpr
ruleNodeDefExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Node
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeDefExprAccess().getNodeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNodeDefExprAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeDefExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getNodeDefExprAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeDefExprAccess().getArgsArgParserRuleCall_3_0_0()); 
	    }
		lv_args_3_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeDefExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getNodeDefExprAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeDefExprAccess().getArgsArgParserRuleCall_3_1_1_0()); 
	    }
		lv_args_5_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeDefExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getNodeDefExprAccess().getRightParenthesisKeyword_4());
    }

	otherlv_7=Returns
    {
    	newLeafNode(otherlv_7, grammarAccess.getNodeDefExprAccess().getReturnsKeyword_5());
    }

	otherlv_8=LeftParenthesis
    {
    	newLeafNode(otherlv_8, grammarAccess.getNodeDefExprAccess().getLeftParenthesisKeyword_6());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeDefExprAccess().getRetsArgParserRuleCall_7_0_0()); 
	    }
		lv_rets_9_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeDefExprRule());
	        }
       		add(
       			$current, 
       			"rets",
        		lv_rets_9_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_10=Comma
    {
    	newLeafNode(otherlv_10, grammarAccess.getNodeDefExprAccess().getCommaKeyword_7_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeDefExprAccess().getRetsArgParserRuleCall_7_1_1_0()); 
	    }
		lv_rets_11_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeDefExprRule());
	        }
       		add(
       			$current, 
       			"rets",
        		lv_rets_11_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_12=RightParenthesis
    {
    	newLeafNode(otherlv_12, grammarAccess.getNodeDefExprAccess().getRightParenthesisKeyword_8());
    }

	otherlv_13=Semicolon
    {
    	newLeafNode(otherlv_13, grammarAccess.getNodeDefExprAccess().getSemicolonKeyword_9());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeDefExprAccess().getNodeBodyNodeBodyExprParserRuleCall_10_0()); 
	    }
		lv_nodeBody_14_0=ruleNodeBodyExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeDefExprRule());
	        }
       		set(
       			$current, 
       			"nodeBody",
        		lv_nodeBody_14_0, 
        		"NodeBodyExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNodeBodyExpr
entryRuleNodeBodyExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNodeBodyExprRule()); }
	 iv_ruleNodeBodyExpr=ruleNodeBodyExpr 
	 { $current=$iv_ruleNodeBodyExpr.current; } 
	 EOF 
;

// Rule NodeBodyExpr
ruleNodeBodyExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Var
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeBodyExprAccess().getVarKeyword_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeBodyExprAccess().getLocsArgParserRuleCall_0_1_0_0()); 
	    }
		lv_locs_1_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeBodyExprRule());
	        }
       		add(
       			$current, 
       			"locs",
        		lv_locs_1_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Semicolon
    {
    	newLeafNode(otherlv_2, grammarAccess.getNodeBodyExprAccess().getSemicolonKeyword_0_1_1());
    }
)+)?
	otherlv_3=Let
    {
    	newLeafNode(otherlv_3, grammarAccess.getNodeBodyExprAccess().getLetKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeBodyExprAccess().getStmtsNodeStmtParserRuleCall_2_0()); 
	    }
		lv_stmts_4_0=ruleNodeStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeBodyExprRule());
	        }
       		add(
       			$current, 
       			"stmts",
        		lv_stmts_4_0, 
        		"NodeStmt");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_5=Tel
    {
    	newLeafNode(otherlv_5, grammarAccess.getNodeBodyExprAccess().getTelKeyword_3());
    }

	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getNodeBodyExprAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleNodeStmt
entryRuleNodeStmt returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNodeStmtRule()); }
	 iv_ruleNodeStmt=ruleNodeStmt 
	 { $current=$iv_ruleNodeStmt.current; } 
	 EOF 
;

// Rule NodeStmt
ruleNodeStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNodeStmtAccess().getNodeEqAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeStmtRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getNodeStmtAccess().getLhsArgCrossReference_0_1_0()); 
	}

)
)(
	otherlv_2=Comma
    {
    	newLeafNode(otherlv_2, grammarAccess.getNodeStmtAccess().getCommaKeyword_0_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeStmtRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getNodeStmtAccess().getLhsArgCrossReference_0_2_1_0()); 
	}

)
))*
	otherlv_4=EqualsSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getNodeStmtAccess().getEqualsSignKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeStmtAccess().getExprExprParserRuleCall_0_4_0()); 
	    }
		lv_expr_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeStmtRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_5_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getNodeStmtAccess().getSemicolonKeyword_0_5());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNodeStmtAccess().getNodeLemmaAction_1_0(),
            $current);
    }
)
	otherlv_8=Lemma
    {
    	newLeafNode(otherlv_8, grammarAccess.getNodeStmtAccess().getLemmaKeyword_1_1());
    }
(
(
		lv_str_9_0=RULE_STRING
		{
			newLeafNode(lv_str_9_0, grammarAccess.getNodeStmtAccess().getStrSTRINGTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeStmtRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"str",
        		lv_str_9_0, 
        		"STRING");
	    }

)
)
	otherlv_10=Colon
    {
    	newLeafNode(otherlv_10, grammarAccess.getNodeStmtAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeStmtAccess().getExprExprParserRuleCall_1_4_0()); 
	    }
		lv_expr_11_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeStmtRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_11_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_12=Semicolon
    {
    	newLeafNode(otherlv_12, grammarAccess.getNodeStmtAccess().getSemicolonKeyword_1_5());
    }
))
;





// Entry rule entryRuleArg
entryRuleArg returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArgRule()); }
	 iv_ruleArg=ruleArg 
	 { $current=$iv_ruleArg.current; } 
	 EOF 
;

// Rule Arg
ruleArg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getArgAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getPrimTypeAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getStringPrimTypesParserRuleCall_0_1_0()); 
	    }
		lv_string_1_0=ruleprimTypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"string",
        		lv_string_1_0, 
        		"primTypes");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=LeftSquareBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_0_2_0());
    }
(
(
		lv_lowNeg_3_0=
	HyphenMinus
    {
        newLeafNode(lv_lowNeg_3_0, grammarAccess.getTypeAccess().getLowNegHyphenMinusKeyword_0_2_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "lowNeg", lv_lowNeg_3_0, "-");
	    }

)
)?(
(
(
		lv_rangeLow_4_1=RULE_INTEGER_LIT
		{
			newLeafNode(lv_rangeLow_4_1, grammarAccess.getTypeAccess().getRangeLowINTEGER_LITTerminalRuleCall_0_2_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rangeLow",
        		lv_rangeLow_4_1, 
        		"INTEGER_LIT");
	    }

    |		lv_rangeLow_4_2=RULE_REAL_LIT
		{
			newLeafNode(lv_rangeLow_4_2, grammarAccess.getTypeAccess().getRangeLowREAL_LITTerminalRuleCall_0_2_2_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rangeLow",
        		lv_rangeLow_4_2, 
        		"REAL_LIT");
	    }

)

)
)
	otherlv_5=Comma
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getCommaKeyword_0_2_3());
    }
(
(
		lv_highNeg_6_0=
	HyphenMinus
    {
        newLeafNode(lv_highNeg_6_0, grammarAccess.getTypeAccess().getHighNegHyphenMinusKeyword_0_2_4_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "highNeg", lv_highNeg_6_0, "-");
	    }

)
)?(
(
(
		lv_rangeHigh_7_1=RULE_INTEGER_LIT
		{
			newLeafNode(lv_rangeHigh_7_1, grammarAccess.getTypeAccess().getRangeHighINTEGER_LITTerminalRuleCall_0_2_5_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rangeHigh",
        		lv_rangeHigh_7_1, 
        		"INTEGER_LIT");
	    }

    |		lv_rangeHigh_7_2=RULE_REAL_LIT
		{
			newLeafNode(lv_rangeHigh_7_2, grammarAccess.getTypeAccess().getRangeHighREAL_LITTerminalRuleCall_0_2_5_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rangeHigh",
        		lv_rangeHigh_7_2, 
        		"REAL_LIT");
	    }

)

)
)
	otherlv_8=RightSquareBracket
    {
    	newLeafNode(otherlv_8, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_0_2_6());
    }
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getRecordTypeAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getRecordNestedDotIDParserRuleCall_1_1_0()); 
	    }
		lv_record_10_0=ruleNestedDotID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"record",
        		lv_record_10_0, 
        		"NestedDotID");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleprimTypes
entryRuleprimTypes returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPrimTypesRule()); } 
	 iv_ruleprimTypes=ruleprimTypes 
	 { $current=$iv_ruleprimTypes.current.getText(); }  
	 EOF 
;

// Rule primTypes
ruleprimTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Real 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimTypesAccess().getRealKeyword_0()); 
    }

    |
	kw=Bool 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimTypesAccess().getBoolKeyword_1()); 
    }

    |
	kw=Int 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimTypesAccess().getIntKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleRecordDefExpr
entryRuleRecordDefExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRecordDefExprRule()); }
	 iv_ruleRecordDefExpr=ruleRecordDefExpr 
	 { $current=$iv_ruleRecordDefExpr.current; } 
	 EOF 
;

// Rule RecordDefExpr
ruleRecordDefExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Type
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordDefExprAccess().getTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRecordDefExprAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecordDefExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
	otherlv_2=EqualsSign
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordDefExprAccess().getEqualsSignKeyword_2());
    }

	otherlv_3=Struct
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecordDefExprAccess().getStructKeyword_3());
    }

	otherlv_4=LeftCurlyBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getRecordDefExprAccess().getLeftCurlyBracketKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordDefExprAccess().getArgsArgParserRuleCall_5_0_0()); 
	    }
		lv_args_5_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordDefExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_6=Comma
    {
    	newLeafNode(otherlv_6, grammarAccess.getRecordDefExprAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordDefExprAccess().getArgsArgParserRuleCall_5_1_1_0()); 
	    }
		lv_args_7_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordDefExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_7_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
	otherlv_8=RightCurlyBracket
    {
    	newLeafNode(otherlv_8, grammarAccess.getRecordDefExprAccess().getRightCurlyBracketKeyword_6());
    }

	otherlv_9=Semicolon
    {
    	newLeafNode(otherlv_9, grammarAccess.getRecordDefExprAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExprAccess().getArrowExprParserRuleCall()); 
    }
    this_ArrowExpr_0=ruleArrowExpr
    {
        $current = $this_ArrowExpr_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleArrowExpr
entryRuleArrowExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArrowExprRule()); }
	 iv_ruleArrowExpr=ruleArrowExpr 
	 { $current=$iv_ruleArrowExpr.current; } 
	 EOF 
;

// Rule ArrowExpr
ruleArrowExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getArrowExprAccess().getImpliesExprParserRuleCall_0()); 
    }
    this_ImpliesExpr_0=ruleImpliesExpr
    {
        $current = $this_ImpliesExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(

HyphenMinusGreaterThanSign


)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getArrowExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=
	HyphenMinusGreaterThanSign
    {
        newLeafNode(lv_op_2_0, grammarAccess.getArrowExprAccess().getOpHyphenMinusGreaterThanSignKeyword_1_0_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrowExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "->");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowExprAccess().getRightArrowExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleArrowExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ArrowExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleImpliesExpr
entryRuleImpliesExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getImpliesExprRule()); }
	 iv_ruleImpliesExpr=ruleImpliesExpr 
	 { $current=$iv_ruleImpliesExpr.current; } 
	 EOF 
;

// Rule ImpliesExpr
ruleImpliesExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImpliesExprAccess().getEquivExprParserRuleCall_0()); 
    }
    this_EquivExpr_0=ruleEquivExpr
    {
        $current = $this_EquivExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(

EqualsSignGreaterThanSign


)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImpliesExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=
	EqualsSignGreaterThanSign
    {
        newLeafNode(lv_op_2_0, grammarAccess.getImpliesExprAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImpliesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "=>");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExprAccess().getRightImpliesExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleImpliesExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ImpliesExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEquivExpr
entryRuleEquivExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEquivExprRule()); }
	 iv_ruleEquivExpr=ruleEquivExpr 
	 { $current=$iv_ruleEquivExpr.current; } 
	 EOF 
;

// Rule EquivExpr
ruleEquivExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEquivExprAccess().getOrExprParserRuleCall_0()); 
    }
    this_OrExpr_0=ruleOrExpr
    {
        $current = $this_OrExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(

LessThanSignEqualsSignGreaterThanSign


)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEquivExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=
	LessThanSignEqualsSignGreaterThanSign
    {
        newLeafNode(lv_op_2_0, grammarAccess.getEquivExprAccess().getOpLessThanSignEqualsSignGreaterThanSignKeyword_1_0_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEquivExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "<=>");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getEquivExprAccess().getRightOrExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleOrExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquivExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"OrExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOrExpr
entryRuleOrExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrExprRule()); }
	 iv_ruleOrExpr=ruleOrExpr 
	 { $current=$iv_ruleOrExpr.current; } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExprAccess().getAndExprParserRuleCall_0()); 
    }
    this_AndExpr_0=ruleAndExpr
    {
        $current = $this_AndExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(

Or


)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=
	Or
    {
        newLeafNode(lv_op_2_0, grammarAccess.getOrExprAccess().getOpOrKeyword_1_0_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "or");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getRightAndExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpr
entryRuleAndExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAndExprRule()); }
	 iv_ruleAndExpr=ruleAndExpr 
	 { $current=$iv_ruleAndExpr.current; } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExprAccess().getRelateExprParserRuleCall_0()); 
    }
    this_RelateExpr_0=ruleRelateExpr
    {
        $current = $this_RelateExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(

And


)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=
	And
    {
        newLeafNode(lv_op_2_0, grammarAccess.getAndExprAccess().getOpAndKeyword_1_0_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "and");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getRightRelateExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleRelateExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"RelateExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelateOp
entryRuleRelateOp returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRelateOpRule()); } 
	 iv_ruleRelateOp=ruleRelateOp 
	 { $current=$iv_ruleRelateOp.current.getText(); }  
	 EOF 
;

// Rule RelateOp
ruleRelateOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=LessThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelateOpAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw=LessThanSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelateOpAccess().getLessThanSignEqualsSignKeyword_1()); 
    }

    |
	kw=GreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelateOpAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw=GreaterThanSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelateOpAccess().getGreaterThanSignEqualsSignKeyword_3()); 
    }

    |
	kw=EqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelateOpAccess().getEqualsSignKeyword_4()); 
    }

    |
	kw=LessThanSignGreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelateOpAccess().getLessThanSignGreaterThanSignKeyword_5()); 
    }

    |
	kw=ExclamationMarkEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelateOpAccess().getExclamationMarkEqualsSignKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleRelateExpr
entryRuleRelateExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRelateExprRule()); }
	 iv_ruleRelateExpr=ruleRelateExpr 
	 { $current=$iv_ruleRelateExpr.current; } 
	 EOF 
;

// Rule RelateExpr
ruleRelateExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelateExprAccess().getAddSubExprParserRuleCall_0()); 
    }
    this_AddSubExpr_0=ruleAddSubExpr
    {
        $current = $this_AddSubExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleRelateOp
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelateExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelateExprAccess().getOpRelateOpParserRuleCall_1_0_0_1_0()); 
	    }
		lv_op_2_0=ruleRelateOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelateExprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"RelateOp");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelateExprAccess().getRightAddSubExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAddSubExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelateExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AddSubExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAddSubExpr
entryRuleAddSubExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAddSubExprRule()); }
	 iv_ruleAddSubExpr=ruleAddSubExpr 
	 { $current=$iv_ruleAddSubExpr.current; } 
	 EOF 
;

// Rule AddSubExpr
ruleAddSubExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAddSubExprAccess().getMultDivExprParserRuleCall_0()); 
    }
    this_MultDivExpr_0=ruleMultDivExpr
    {
        $current = $this_MultDivExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(

PlusSign


    |		
HyphenMinus


)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAddSubExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=
	PlusSign
    {
        newLeafNode(lv_op_2_1, grammarAccess.getAddSubExprAccess().getOpPlusSignKeyword_1_0_0_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAddSubExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=
	HyphenMinus
    {
        newLeafNode(lv_op_2_2, grammarAccess.getAddSubExprAccess().getOpHyphenMinusKeyword_1_0_0_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAddSubExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAddSubExprAccess().getRightMultDivExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleMultDivExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddSubExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"MultDivExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultDivExpr
entryRuleMultDivExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMultDivExprRule()); }
	 iv_ruleMultDivExpr=ruleMultDivExpr 
	 { $current=$iv_ruleMultDivExpr.current; } 
	 EOF 
;

// Rule MultDivExpr
ruleMultDivExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultDivExprAccess().getUnaryExprParserRuleCall_0()); 
    }
    this_UnaryExpr_0=ruleUnaryExpr
    {
        $current = $this_UnaryExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(

Asterisk


    |		
Solidus


    |		
Div


    |		
Mod


)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultDivExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=
	Asterisk
    {
        newLeafNode(lv_op_2_1, grammarAccess.getMultDivExprAccess().getOpAsteriskKeyword_1_0_0_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultDivExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=
	Solidus
    {
        newLeafNode(lv_op_2_2, grammarAccess.getMultDivExprAccess().getOpSolidusKeyword_1_0_0_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultDivExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=
	Div
    {
        newLeafNode(lv_op_2_3, grammarAccess.getMultDivExprAccess().getOpDivKeyword_1_0_0_1_0_2());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultDivExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=
	Mod
    {
        newLeafNode(lv_op_2_4, grammarAccess.getMultDivExprAccess().getOpModKeyword_1_0_0_1_0_3());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultDivExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultDivExprAccess().getRightUnaryExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleUnaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultDivExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UnaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	 iv_ruleUnaryExpr=ruleUnaryExpr 
	 { $current=$iv_ruleUnaryExpr.current; } 
	 EOF 
;

// Rule UnaryExpr
ruleUnaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryExprAccess().getUnaryExprAction_0_0(),
            $current);
    }
)(
(
(
		lv_op_1_1=
	HyphenMinus
    {
        newLeafNode(lv_op_1_1, grammarAccess.getUnaryExprAccess().getOpHyphenMinusKeyword_0_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=
	Not
    {
        newLeafNode(lv_op_1_2, grammarAccess.getUnaryExprAccess().getOpNotKeyword_0_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExprAccess().getExprUnaryExprParserRuleCall_0_2_0()); 
	    }
		lv_expr_2_0=ruleUnaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"UnaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getUnaryExprAccess().getIfThenElseExprParserRuleCall_1()); 
    }
    this_IfThenElseExpr_3=ruleIfThenElseExpr
    {
        $current = $this_IfThenElseExpr_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIfThenElseExpr
entryRuleIfThenElseExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIfThenElseExprRule()); }
	 iv_ruleIfThenElseExpr=ruleIfThenElseExpr 
	 { $current=$iv_ruleIfThenElseExpr.current; } 
	 EOF 
;

// Rule IfThenElseExpr
ruleIfThenElseExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIfThenElseExprAccess().getIfThenElseExprAction_0_0(),
            $current);
    }
)
	otherlv_1=If
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfThenElseExprAccess().getIfKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseExprAccess().getAExprParserRuleCall_0_2_0()); 
	    }
		lv_a_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseExprRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Then
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfThenElseExprAccess().getThenKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseExprAccess().getBExprParserRuleCall_0_4_0()); 
	    }
		lv_b_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseExprRule());
	        }
       		set(
       			$current, 
       			"b",
        		lv_b_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=Else
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfThenElseExprAccess().getElseKeyword_0_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseExprAccess().getCExprParserRuleCall_0_6_0()); 
	    }
		lv_c_6_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseExprRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_6_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getIfThenElseExprAccess().getPreDefFnExprParserRuleCall_1()); 
    }
    this_PreDefFnExpr_7=rulePreDefFnExpr
    {
        $current = $this_PreDefFnExpr_7.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePreDefFnExpr
entryRulePreDefFnExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPreDefFnExprRule()); }
	 iv_rulePreDefFnExpr=rulePreDefFnExpr 
	 { $current=$iv_rulePreDefFnExpr.current; } 
	 EOF 
;

// Rule PreDefFnExpr
rulePreDefFnExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPreDefFnExprAccess().getPrevExprAction_0_0(),
            $current);
    }
)
	otherlv_1=Prev
    {
    	newLeafNode(otherlv_1, grammarAccess.getPreDefFnExprAccess().getPrevKeyword_0_1());
    }

	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getPreDefFnExprAccess().getLeftParenthesisKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreDefFnExprAccess().getDelayExprParserRuleCall_0_3_0()); 
	    }
		lv_delay_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreDefFnExprRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getPreDefFnExprAccess().getCommaKeyword_0_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreDefFnExprAccess().getInitExprParserRuleCall_0_5_0()); 
	    }
		lv_init_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreDefFnExprRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_5_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getPreDefFnExprAccess().getRightParenthesisKeyword_0_6());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPreDefFnExprAccess().getGetPropertyExprAction_1_0(),
            $current);
    }
)
	otherlv_8=Get_Property
    {
    	newLeafNode(otherlv_8, grammarAccess.getPreDefFnExprAccess().getGet_PropertyKeyword_1_1());
    }

	otherlv_9=LeftParenthesis
    {
    	newLeafNode(otherlv_9, grammarAccess.getPreDefFnExprAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreDefFnExprAccess().getComponentExprParserRuleCall_1_3_0()); 
	    }
		lv_component_10_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreDefFnExprRule());
	        }
       		set(
       			$current, 
       			"component",
        		lv_component_10_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_11=Comma
    {
    	newLeafNode(otherlv_11, grammarAccess.getPreDefFnExprAccess().getCommaKeyword_1_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPreDefFnExprRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPreDefFnExprAccess().getPropNamedElementCrossReference_1_5_0()); 
	    }
		ruleQCLREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_13=RightParenthesis
    {
    	newLeafNode(otherlv_13, grammarAccess.getPreDefFnExprAccess().getRightParenthesisKeyword_1_6());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPreDefFnExprAccess().getRecordUpdateExprParserRuleCall_2()); 
    }
    this_RecordUpdateExpr_14=ruleRecordUpdateExpr
    {
        $current = $this_RecordUpdateExpr_14.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRecordUpdateExpr
entryRuleRecordUpdateExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRecordUpdateExprRule()); }
	 iv_ruleRecordUpdateExpr=ruleRecordUpdateExpr 
	 { $current=$iv_ruleRecordUpdateExpr.current; } 
	 EOF 
;

// Rule RecordUpdateExpr
ruleRecordUpdateExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRecordUpdateExprAccess().getTermExprParserRuleCall_0()); 
    }
    this_TermExpr_0=ruleTermExpr
    {
        $current = $this_TermExpr_0.current;
        afterParserOrEnumRuleCall();
    }
((((
)(
LeftCurlyBracket
(
(
	RULE_ID

)
)
ColonEqualsSign
(
(
ruleExpr
)
)
RightCurlyBracket
)+))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRecordUpdateExprAccess().getRecordUpdateExprRecordAction_1_0_0(),
            $current);
    }
)(
	otherlv_2=LeftCurlyBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordUpdateExprAccess().getLeftCurlyBracketKeyword_1_0_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecordUpdateExprRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getRecordUpdateExprAccess().getArgsNamedElementCrossReference_1_0_1_1_0()); 
	}

)
)
	otherlv_4=ColonEqualsSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getRecordUpdateExprAccess().getColonEqualsSignKeyword_1_0_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordUpdateExprAccess().getArgExprExprParserRuleCall_1_0_1_3_0()); 
	    }
		lv_argExpr_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordUpdateExprRule());
	        }
       		add(
       			$current, 
       			"argExpr",
        		lv_argExpr_5_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=RightCurlyBracket
    {
    	newLeafNode(otherlv_6, grammarAccess.getRecordUpdateExprAccess().getRightCurlyBracketKeyword_1_0_1_4());
    }
)+))?)
;





// Entry rule entryRuleTermExpr
entryRuleTermExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTermExprRule()); }
	 iv_ruleTermExpr=ruleTermExpr 
	 { $current=$iv_ruleTermExpr.current; } 
	 EOF 
;

// Rule TermExpr
ruleTermExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTermExprAccess().getComplexExprParserRuleCall_0()); 
    }
    this_ComplexExpr_0=ruleComplexExpr
    {
        $current = $this_ComplexExpr_0.current;
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermExprAccess().getIntLitExprAction_1_0(),
            $current);
    }
)(
(
		lv_val_2_0=RULE_INTEGER_LIT
		{
			newLeafNode(lv_val_2_0, grammarAccess.getTermExprAccess().getValINTEGER_LITTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_2_0, 
        		"INTEGER_LIT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermExprAccess().getPreExprAction_2_0(),
            $current);
    }
)
	otherlv_4=Pre
    {
    	newLeafNode(otherlv_4, grammarAccess.getTermExprAccess().getPreKeyword_2_1());
    }

	otherlv_5=LeftParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getTermExprAccess().getLeftParenthesisKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermExprAccess().getExprExprParserRuleCall_2_3_0()); 
	    }
		lv_expr_6_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_6_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=RightParenthesis
    {
    	newLeafNode(otherlv_7, grammarAccess.getTermExprAccess().getRightParenthesisKeyword_2_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermExprAccess().getEventExprAction_3_0(),
            $current);
    }
)
	otherlv_9=Event
    {
    	newLeafNode(otherlv_9, grammarAccess.getTermExprAccess().getEventKeyword_3_1());
    }

	otherlv_10=LeftParenthesis
    {
    	newLeafNode(otherlv_10, grammarAccess.getTermExprAccess().getLeftParenthesisKeyword_3_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermExprAccess().getIdNestedDotIDParserRuleCall_3_3_0()); 
	    }
		lv_id_11_0=ruleNestedDotID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermExprRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_11_0, 
        		"NestedDotID");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_12=RightParenthesis
    {
    	newLeafNode(otherlv_12, grammarAccess.getTermExprAccess().getRightParenthesisKeyword_3_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermExprAccess().getRealLitExprAction_4_0(),
            $current);
    }
)(
(
		lv_val_14_0=RULE_REAL_LIT
		{
			newLeafNode(lv_val_14_0, grammarAccess.getTermExprAccess().getValREAL_LITTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_14_0, 
        		"REAL_LIT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermExprAccess().getBoolLitExprAction_5_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTermExprAccess().getValBooleanLiteralParserRuleCall_5_1_0()); 
	    }
		lv_val_16_0=ruleBooleanLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_16_0, 
        		"BooleanLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermExprAccess().getThisExprAction_6_0(),
            $current);
    }
)
	otherlv_18=This
    {
    	newLeafNode(otherlv_18, grammarAccess.getTermExprAccess().getThisKeyword_6_1());
    }
(
	otherlv_19=FullStop
    {
    	newLeafNode(otherlv_19, grammarAccess.getTermExprAccess().getFullStopKeyword_6_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermExprAccess().getSubThisNestedDotIDParserRuleCall_6_2_1_0()); 
	    }
		lv_subThis_20_0=ruleNestedDotID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermExprRule());
	        }
       		set(
       			$current, 
       			"subThis",
        		lv_subThis_20_0, 
        		"NestedDotID");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermExprAccess().getFloorCastAction_7_0(),
            $current);
    }
)
	otherlv_22=Floor
    {
    	newLeafNode(otherlv_22, grammarAccess.getTermExprAccess().getFloorKeyword_7_1());
    }

	otherlv_23=LeftParenthesis
    {
    	newLeafNode(otherlv_23, grammarAccess.getTermExprAccess().getLeftParenthesisKeyword_7_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermExprAccess().getExprExprParserRuleCall_7_3_0()); 
	    }
		lv_expr_24_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_24_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_25=RightParenthesis
    {
    	newLeafNode(otherlv_25, grammarAccess.getTermExprAccess().getRightParenthesisKeyword_7_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermExprAccess().getRealCastAction_8_0(),
            $current);
    }
)
	otherlv_27=Real
    {
    	newLeafNode(otherlv_27, grammarAccess.getTermExprAccess().getRealKeyword_8_1());
    }

	otherlv_28=LeftParenthesis
    {
    	newLeafNode(otherlv_28, grammarAccess.getTermExprAccess().getLeftParenthesisKeyword_8_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermExprAccess().getExprExprParserRuleCall_8_3_0()); 
	    }
		lv_expr_29_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_29_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_30=RightParenthesis
    {
    	newLeafNode(otherlv_30, grammarAccess.getTermExprAccess().getRightParenthesisKeyword_8_4());
    }
)
    |(
	otherlv_31=LeftParenthesis
    {
    	newLeafNode(otherlv_31, grammarAccess.getTermExprAccess().getLeftParenthesisKeyword_9_0());
    }

    { 
        newCompositeNode(grammarAccess.getTermExprAccess().getExprParserRuleCall_9_1()); 
    }
    this_Expr_32=ruleExpr
    {
        $current = $this_Expr_32.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_33=RightParenthesis
    {
    	newLeafNode(otherlv_33, grammarAccess.getTermExprAccess().getRightParenthesisKeyword_9_2());
    }
))
;





// Entry rule entryRuleComplexExpr
entryRuleComplexExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComplexExprRule()); }
	 iv_ruleComplexExpr=ruleComplexExpr 
	 { $current=$iv_ruleComplexExpr.current; } 
	 EOF 
;

// Rule ComplexExpr
ruleComplexExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComplexExprAccess().getNestedDotIDParserRuleCall_0()); 
    }
    this_NestedDotID_0=ruleNestedDotID
    {
        $current = $this_NestedDotID_0.current;
        afterParserOrEnumRuleCall();
    }
((((((
)
LeftParenthesis
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComplexExprAccess().getFnCallExprFnAction_1_0_0_0_0(),
            $current);
    }
)
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getComplexExprAccess().getLeftParenthesisKeyword_1_0_0_0_1());
    }
))((
(
		{ 
	        newCompositeNode(grammarAccess.getComplexExprAccess().getArgsExprParserRuleCall_1_0_1_0_0()); 
	    }
		lv_args_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getComplexExprAccess().getCommaKeyword_1_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexExprAccess().getArgsExprParserRuleCall_1_0_1_1_1_0()); 
	    }
		lv_args_5_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getComplexExprAccess().getRightParenthesisKeyword_1_0_2());
    }
)
    |(((((
)
LeftCurlyBracket
(
(
	RULE_ID

)
)
EqualsSign
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComplexExprAccess().getRecordExprRecordAction_1_1_0_0_0(),
            $current);
    }
)
	otherlv_8=LeftCurlyBracket
    {
    	newLeafNode(otherlv_8, grammarAccess.getComplexExprAccess().getLeftCurlyBracketKeyword_1_1_0_0_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplexExprRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getComplexExprAccess().getArgsNamedElementCrossReference_1_1_0_0_2_0()); 
	}

)
)
	otherlv_10=EqualsSign
    {
    	newLeafNode(otherlv_10, grammarAccess.getComplexExprAccess().getEqualsSignKeyword_1_1_0_0_3());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexExprAccess().getArgExprExprParserRuleCall_1_1_1_0()); 
	    }
		lv_argExpr_11_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexExprRule());
	        }
       		add(
       			$current, 
       			"argExpr",
        		lv_argExpr_11_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_12=Semicolon
    {
    	newLeafNode(otherlv_12, grammarAccess.getComplexExprAccess().getSemicolonKeyword_1_1_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplexExprRule());
	        }
        }
	otherlv_13=RULE_ID
	{
		newLeafNode(otherlv_13, grammarAccess.getComplexExprAccess().getArgsNamedElementCrossReference_1_1_2_1_0()); 
	}

)
)
	otherlv_14=EqualsSign
    {
    	newLeafNode(otherlv_14, grammarAccess.getComplexExprAccess().getEqualsSignKeyword_1_1_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexExprAccess().getArgExprExprParserRuleCall_1_1_2_3_0()); 
	    }
		lv_argExpr_15_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexExprRule());
	        }
       		add(
       			$current, 
       			"argExpr",
        		lv_argExpr_15_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_16=RightCurlyBracket
    {
    	newLeafNode(otherlv_16, grammarAccess.getComplexExprAccess().getRightCurlyBracketKeyword_1_1_3());
    }
))?)
;





// Entry rule entryRuleNestedDotID
entryRuleNestedDotID returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNestedDotIDRule()); }
	 iv_ruleNestedDotID=ruleNestedDotID 
	 { $current=$iv_ruleNestedDotID.current; } 
	 EOF 
;

// Rule NestedDotID
ruleNestedDotID returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNestedDotIDRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getNestedDotIDAccess().getBaseNamedElementCrossReference_0_0()); 
	    }
		ruleQCPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((
FullStop
((
(
ruleReservedVarTag
)
)
    |(
(
ruleNestedDotID
)
))))=>(
	otherlv_1=FullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getNestedDotIDAccess().getFullStopKeyword_1_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNestedDotIDAccess().getTagReservedVarTagParserRuleCall_1_0_1_0_0()); 
	    }
		lv_tag_2_0=ruleReservedVarTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedDotIDRule());
	        }
       		set(
       			$current, 
       			"tag",
        		lv_tag_2_0, 
        		"ReservedVarTag");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedDotIDAccess().getSubNestedDotIDParserRuleCall_1_0_1_1_0()); 
	    }
		lv_sub_3_0=ruleNestedDotID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedDotIDRule());
	        }
       		set(
       			$current, 
       			"sub",
        		lv_sub_3_0, 
        		"NestedDotID");
	        afterParserOrEnumRuleCall();
	    }

)
))))?)
;





// Entry rule entryRuleQCPREF
entryRuleQCPREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQCPREFRule()); } 
	 iv_ruleQCPREF=ruleQCPREF 
	 { $current=$iv_ruleQCPREF.current.getText(); }  
	 EOF 
;

// Rule QCPREF
ruleQCPREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(((((RULE_ID
	ColonColon 
))=>(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQCPREFAccess().getIDTerminalRuleCall_0_0_0_0()); 
    }

	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCPREFAccess().getColonColonKeyword_0_0_0_1()); 
    }
))    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQCPREFAccess().getIDTerminalRuleCall_0_1()); 
    }
(((
	FullStop 
RULE_ID))=>(
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCPREFAccess().getFullStopKeyword_0_2_0_0()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getQCPREFAccess().getIDTerminalRuleCall_0_2_0_1()); 
    }
))?)
    |    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getQCPREFAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleReservedVarTag
entryRuleReservedVarTag returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getReservedVarTagRule()); } 
	 iv_ruleReservedVarTag=ruleReservedVarTag 
	 { $current=$iv_ruleReservedVarTag.current.getText(); }  
	 EOF 
;

// Rule ReservedVarTag
ruleReservedVarTag returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KW__REMOVE 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedVarTagAccess().get_REMOVEKeyword_0()); 
    }

    |
	kw=KW__INSERT 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedVarTagAccess().get_INSERTKeyword_1()); 
    }

    |
	kw=KW__COUNT 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedVarTagAccess().get_COUNTKeyword_2()); 
    }

    |
	kw=KW__CLK 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedVarTagAccess().get_CLKKeyword_3()); 
    }
)
    ;







// Entry rule entryRuleContainedPropertyAssociation
entryRuleContainedPropertyAssociation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getContainedPropertyAssociationRule()); }
	 iv_ruleContainedPropertyAssociation=ruleContainedPropertyAssociation 
	 { $current=$iv_ruleContainedPropertyAssociation.current; } 
	 EOF 
;

// Rule ContainedPropertyAssociation
ruleContainedPropertyAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getPropertyPropertyCrossReference_0_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getContainedPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1_0());
    }

    |(
(
		lv_append_2_0=
	PlusSignEqualsSignGreaterThanSign
    {
        newLeafNode(lv_append_2_0, grammarAccess.getContainedPropertyAssociationAccess().getAppendPlusSignEqualsSignGreaterThanSignKeyword_1_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		setWithLastConsumed($current, "append", true, "+=>");
	    }

)
))(
(
		lv_constant_3_0=
	Constant
    {
        newLeafNode(lv_constant_3_0, grammarAccess.getContainedPropertyAssociationAccess().getConstantConstantKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		setWithLastConsumed($current, "constant", true, "constant");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_0_0()); 
	    }
		lv_ownedValue_4_0=ruleOptionalModalPropertyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_4_0, 
        		"OptionalModalPropertyValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=Comma
    {
    	newLeafNode(otherlv_5, grammarAccess.getContainedPropertyAssociationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_1_1_0()); 
	    }
		lv_ownedValue_6_0=ruleOptionalModalPropertyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_6_0, 
        		"OptionalModalPropertyValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)(
	otherlv_7=Applies
    {
    	newLeafNode(otherlv_7, grammarAccess.getContainedPropertyAssociationAccess().getAppliesKeyword_4_0());
    }

	otherlv_8=To
    {
    	newLeafNode(otherlv_8, grammarAccess.getContainedPropertyAssociationAccess().getToKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToContainmentPathParserRuleCall_4_2_0()); 
	    }
		lv_appliesTo_9_0=ruleContainmentPath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"appliesTo",
        		lv_appliesTo_9_0, 
        		"ContainmentPath");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_10=Comma
    {
    	newLeafNode(otherlv_10, grammarAccess.getContainedPropertyAssociationAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToContainmentPathParserRuleCall_4_3_1_0()); 
	    }
		lv_appliesTo_11_0=ruleContainmentPath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"appliesTo",
        		lv_appliesTo_11_0, 
        		"ContainmentPath");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
	otherlv_12=In
    {
    	newLeafNode(otherlv_12, grammarAccess.getContainedPropertyAssociationAccess().getInKeyword_5_0());
    }

	otherlv_13=Binding
    {
    	newLeafNode(otherlv_13, grammarAccess.getContainedPropertyAssociationAccess().getBindingKeyword_5_1());
    }

	otherlv_14=LeftParenthesis
    {
    	newLeafNode(otherlv_14, grammarAccess.getContainedPropertyAssociationAccess().getLeftParenthesisKeyword_5_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getInBindingClassifierCrossReference_5_3_0()); 
	    }
		ruleQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_16=RightParenthesis
    {
    	newLeafNode(otherlv_16, grammarAccess.getContainedPropertyAssociationAccess().getRightParenthesisKeyword_5_4());
    }
)?
	otherlv_17=Semicolon
    {
    	newLeafNode(otherlv_17, grammarAccess.getContainedPropertyAssociationAccess().getSemicolonKeyword_6());
    }
)
;









// Entry rule entryRuleContainmentPath
entryRuleContainmentPath returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getContainmentPathRule()); }
	 iv_ruleContainmentPath=ruleContainmentPath 
	 { $current=$iv_ruleContainmentPath.current; } 
	 EOF 
;

// Rule ContainmentPath
ruleContainmentPath returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathAccess().getPathContainmentPathElementParserRuleCall_0()); 
	    }
		lv_path_0_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_0_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
)
;







// Entry rule entryRuleOptionalModalPropertyValue
entryRuleOptionalModalPropertyValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOptionalModalPropertyValueRule()); }
	 iv_ruleOptionalModalPropertyValue=ruleOptionalModalPropertyValue 
	 { $current=$iv_ruleOptionalModalPropertyValue.current; } 
	 EOF 
;

// Rule OptionalModalPropertyValue
ruleOptionalModalPropertyValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOptionalModalPropertyValueAccess().getOwnedValuePropertyExpressionParserRuleCall_0_0()); 
	    }
		lv_ownedValue_0_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionalModalPropertyValueRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_0_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=In
    {
    	newLeafNode(otherlv_1, grammarAccess.getOptionalModalPropertyValueAccess().getInKeyword_1_0());
    }

	otherlv_2=Modes
    {
    	newLeafNode(otherlv_2, grammarAccess.getOptionalModalPropertyValueAccess().getModesKeyword_1_1());
    }

	otherlv_3=LeftParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getOptionalModalPropertyValueAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalModalPropertyValueRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeCrossReference_1_3_0()); 
	}

)
)(
	otherlv_5=Comma
    {
    	newLeafNode(otherlv_5, grammarAccess.getOptionalModalPropertyValueAccess().getCommaKeyword_1_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalModalPropertyValueRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeCrossReference_1_4_1_0()); 
	}

)
))*
	otherlv_7=RightParenthesis
    {
    	newLeafNode(otherlv_7, grammarAccess.getOptionalModalPropertyValueAccess().getRightParenthesisKeyword_1_5());
    }
)?)
;





// Entry rule entryRulePropertyValue
entryRulePropertyValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPropertyValueRule()); }
	 iv_rulePropertyValue=rulePropertyValue 
	 { $current=$iv_rulePropertyValue.current; } 
	 EOF 
;

// Rule PropertyValue
rulePropertyValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyValueAccess().getOwnedValuePropertyExpressionParserRuleCall_0()); 
	    }
		lv_ownedValue_0_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyValueRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_0_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePropertyExpression
entryRulePropertyExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPropertyExpressionRule()); }
	 iv_rulePropertyExpression=rulePropertyExpression 
	 { $current=$iv_rulePropertyExpression.current; } 
	 EOF 
;

// Rule PropertyExpression
rulePropertyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getRecordTermParserRuleCall_0()); 
    }
    this_RecordTerm_0=ruleRecordTerm
    {
        $current = $this_RecordTerm_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getReferenceTermParserRuleCall_1()); 
    }
    this_ReferenceTerm_1=ruleReferenceTerm
    {
        $current = $this_ReferenceTerm_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getComponentClassifierTermParserRuleCall_2()); 
    }
    this_ComponentClassifierTerm_2=ruleComponentClassifierTerm
    {
        $current = $this_ComponentClassifierTerm_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getComputedTermParserRuleCall_3()); 
    }
    this_ComputedTerm_3=ruleComputedTerm
    {
        $current = $this_ComputedTerm_3.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getStringTermParserRuleCall_4()); 
    }
    this_StringTerm_4=ruleStringTerm
    {
        $current = $this_StringTerm_4.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getNumericRangeTermParserRuleCall_5()); 
    }
    this_NumericRangeTerm_5=ruleNumericRangeTerm
    {
        $current = $this_NumericRangeTerm_5.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getRealTermParserRuleCall_6()); 
    }
    this_RealTerm_6=ruleRealTerm
    {
        $current = $this_RealTerm_6.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getIntegerTermParserRuleCall_7()); 
    }
    this_IntegerTerm_7=ruleIntegerTerm
    {
        $current = $this_IntegerTerm_7.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getListTermParserRuleCall_8()); 
    }
    this_ListTerm_8=ruleListTerm
    {
        $current = $this_ListTerm_8.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getBooleanLiteralParserRuleCall_9()); 
    }
    this_BooleanLiteral_9=ruleBooleanLiteral
    {
        $current = $this_BooleanLiteral_9.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getLiteralorReferenceTermParserRuleCall_10()); 
    }
    this_LiteralorReferenceTerm_10=ruleLiteralorReferenceTerm
    {
        $current = $this_LiteralorReferenceTerm_10.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteralorReferenceTerm
entryRuleLiteralorReferenceTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralorReferenceTermRule()); }
	 iv_ruleLiteralorReferenceTerm=ruleLiteralorReferenceTerm 
	 { $current=$iv_ruleLiteralorReferenceTerm.current; } 
	 EOF 
;

// Rule LiteralorReferenceTerm
ruleLiteralorReferenceTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralorReferenceTermRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLiteralorReferenceTermAccess().getNamedValueAbstractNamedValueCrossReference_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
            $current);
    }
)((
(
		lv_value_1_0=
	True
    {
        newLeafNode(lv_value_1_0, grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "value", true, "true");
	    }

)
)
    |
	otherlv_2=False
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
    }
))
;





// Entry rule entryRuleConstantValue
entryRuleConstantValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstantValueRule()); }
	 iv_ruleConstantValue=ruleConstantValue 
	 { $current=$iv_ruleConstantValue.current; } 
	 EOF 
;

// Rule ConstantValue
ruleConstantValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantValueRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getConstantValueAccess().getNamedValuePropertyConstantCrossReference_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleReferenceTerm
entryRuleReferenceTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getReferenceTermRule()); }
	 iv_ruleReferenceTerm=ruleReferenceTerm 
	 { $current=$iv_ruleReferenceTerm.current; } 
	 EOF 
;

// Rule ReferenceTerm
ruleReferenceTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Reference
    {
    	newLeafNode(otherlv_0, grammarAccess.getReferenceTermAccess().getReferenceKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getReferenceTermAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceTermAccess().getPathContainmentPathElementParserRuleCall_2_0()); 
	    }
		lv_path_2_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceTermRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_2_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getReferenceTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleRecordTerm
entryRuleRecordTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRecordTermRule()); }
	 iv_ruleRecordTerm=ruleRecordTerm 
	 { $current=$iv_ruleRecordTerm.current; } 
	 EOF 
;

// Rule RecordTerm
ruleRecordTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=LeftSquareBracket
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordTermAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTermAccess().getOwnedFieldValueFieldPropertyAssociationParserRuleCall_1_0()); 
	    }
		lv_ownedFieldValue_1_0=ruleFieldPropertyAssociation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTermRule());
	        }
       		add(
       			$current, 
       			"ownedFieldValue",
        		lv_ownedFieldValue_1_0, 
        		"FieldPropertyAssociation");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_2=RightSquareBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordTermAccess().getRightSquareBracketKeyword_2());
    }
)
;







// Entry rule entryRuleComputedTerm
entryRuleComputedTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComputedTermRule()); }
	 iv_ruleComputedTerm=ruleComputedTerm 
	 { $current=$iv_ruleComputedTerm.current; } 
	 EOF 
;

// Rule ComputedTerm
ruleComputedTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Compute
    {
    	newLeafNode(otherlv_0, grammarAccess.getComputedTermAccess().getComputeKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getComputedTermAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_function_2_0=RULE_ID
		{
			newLeafNode(lv_function_2_0, grammarAccess.getComputedTermAccess().getFunctionIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComputedTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"function",
        		lv_function_2_0, 
        		"ID");
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getComputedTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleComponentClassifierTerm
entryRuleComponentClassifierTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComponentClassifierTermRule()); }
	 iv_ruleComponentClassifierTerm=ruleComponentClassifierTerm 
	 { $current=$iv_ruleComponentClassifierTerm.current; } 
	 EOF 
;

// Rule ComponentClassifierTerm
ruleComponentClassifierTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Classifier
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentClassifierTermAccess().getClassifierKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getComponentClassifierTermAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentClassifierTermRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getComponentClassifierTermAccess().getClassifierComponentClassifierCrossReference_2_0()); 
	    }
		ruleQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getComponentClassifierTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleListTerm
entryRuleListTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getListTermRule()); }
	 iv_ruleListTerm=ruleListTerm 
	 { $current=$iv_ruleListTerm.current; } 
	 EOF 
;

// Rule ListTerm
ruleListTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListTermAccess().getListValueAction_0(),
            $current);
    }
)
	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getListTermAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getListTermAccess().getOwnedListElementPropertyExpressionParserRuleCall_2_0_0()); 
	    }
		lv_ownedListElement_2_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListTermRule());
	        }
       		add(
       			$current, 
       			"ownedListElement",
        		lv_ownedListElement_2_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getListTermAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListTermAccess().getOwnedListElementPropertyExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_ownedListElement_4_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListTermRule());
	        }
       		add(
       			$current, 
       			"ownedListElement",
        		lv_ownedListElement_4_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getListTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleFieldPropertyAssociation
entryRuleFieldPropertyAssociation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFieldPropertyAssociationRule()); }
	 iv_ruleFieldPropertyAssociation=ruleFieldPropertyAssociation 
	 { $current=$iv_ruleFieldPropertyAssociation.current; } 
	 EOF 
;

// Rule FieldPropertyAssociation
ruleFieldPropertyAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldPropertyAssociationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFieldPropertyAssociationAccess().getPropertyBasicPropertyCrossReference_0_0()); 
	}

)
)
	otherlv_1=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldPropertyAssociationAccess().getOwnedValuePropertyExpressionParserRuleCall_2_0()); 
	    }
		lv_ownedValue_2_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldPropertyAssociationRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_2_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getFieldPropertyAssociationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleContainmentPathElement
entryRuleContainmentPathElement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getContainmentPathElementRule()); }
	 iv_ruleContainmentPathElement=ruleContainmentPathElement 
	 { $current=$iv_ruleContainmentPathElement.current; } 
	 EOF 
;

// Rule ContainmentPathElement
ruleContainmentPathElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainmentPathElementRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getContainmentPathElementAccess().getNamedElementNamedElementCrossReference_0_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathElementAccess().getArrayRangeArrayRangeParserRuleCall_0_1_0()); 
	    }
		lv_arrayRange_1_0=ruleArrayRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathElementRule());
	        }
       		add(
       			$current, 
       			"arrayRange",
        		lv_arrayRange_1_0, 
        		"ArrayRange");
	        afterParserOrEnumRuleCall();
	    }

)
)?)(
	otherlv_2=FullStop
    {
    	newLeafNode(otherlv_2, grammarAccess.getContainmentPathElementAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathElementAccess().getPathContainmentPathElementParserRuleCall_1_1_0()); 
	    }
		lv_path_3_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathElementRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_3_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;







// Entry rule entryRulePlusMinus
entryRulePlusMinus returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPlusMinusRule()); } 
	 iv_rulePlusMinus=rulePlusMinus 
	 { $current=$iv_rulePlusMinus.current.getText(); }  
	 EOF 
;

// Rule PlusMinus
rulePlusMinus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPlusMinusAccess().getPlusSignKeyword_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPlusMinusAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleStringTerm
entryRuleStringTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStringTermRule()); }
	 iv_ruleStringTerm=ruleStringTerm 
	 { $current=$iv_ruleStringTerm.current; } 
	 EOF 
;

// Rule StringTerm
ruleStringTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringTermAccess().getValueNoQuoteStringParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleNoQuoteString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"NoQuoteString");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNoQuoteString
entryRuleNoQuoteString returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNoQuoteStringRule()); } 
	 iv_ruleNoQuoteString=ruleNoQuoteString 
	 { $current=$iv_ruleNoQuoteString.current.getText(); }  
	 EOF 
;

// Rule NoQuoteString
ruleNoQuoteString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getNoQuoteStringAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleArrayRange
entryRuleArrayRange returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArrayRangeRule()); }
	 iv_ruleArrayRange=ruleArrayRange 
	 { $current=$iv_ruleArrayRange.current; } 
	 EOF 
;

// Rule ArrayRange
ruleArrayRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayRangeAccess().getArrayRangeAction_0(),
            $current);
    }
)
	otherlv_1=LeftSquareBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayRangeAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayRangeAccess().getLowerBoundINTVALUEParserRuleCall_2_0()); 
	    }
		lv_lowerBound_2_0=ruleINTVALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_2_0, 
        		"INTVALUE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=FullStopFullStop
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayRangeAccess().getFullStopFullStopKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayRangeAccess().getUpperBoundINTVALUEParserRuleCall_3_1_0()); 
	    }
		lv_upperBound_4_0=ruleINTVALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_4_0, 
        		"INTVALUE");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_5=RightSquareBracket
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayRangeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSignedConstant
entryRuleSignedConstant returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSignedConstantRule()); }
	 iv_ruleSignedConstant=ruleSignedConstant 
	 { $current=$iv_ruleSignedConstant.current; } 
	 EOF 
;

// Rule SignedConstant
ruleSignedConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSignedConstantAccess().getOpPlusMinusParserRuleCall_0_0()); 
	    }
		lv_op_0_0=rulePlusMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignedConstantRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"PlusMinus");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignedConstantAccess().getOwnedPropertyExpressionConstantValueParserRuleCall_1_0()); 
	    }
		lv_ownedPropertyExpression_1_0=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignedConstantRule());
	        }
       		add(
       			$current, 
       			"ownedPropertyExpression",
        		lv_ownedPropertyExpression_1_0, 
        		"ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIntegerTerm
entryRuleIntegerTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerTermRule()); }
	 iv_ruleIntegerTerm=ruleIntegerTerm 
	 { $current=$iv_ruleIntegerTerm.current; } 
	 EOF 
;

// Rule IntegerTerm
ruleIntegerTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerTermAccess().getValueSignedIntParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleSignedInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"SignedInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerTermRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getIntegerTermAccess().getUnitUnitLiteralCrossReference_1_0()); 
	}

)
)?)
;





// Entry rule entryRuleSignedInt
entryRuleSignedInt returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSignedIntRule()); } 
	 iv_ruleSignedInt=ruleSignedInt 
	 { $current=$iv_ruleSignedInt.current.getText(); }  
	 EOF 
;

// Rule SignedInt
ruleSignedInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedIntAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedIntAccess().getHyphenMinusKeyword_0_1()); 
    }
)?    this_INTEGER_LIT_2=RULE_INTEGER_LIT    {
		$current.merge(this_INTEGER_LIT_2);
    }

    { 
    newLeafNode(this_INTEGER_LIT_2, grammarAccess.getSignedIntAccess().getINTEGER_LITTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleRealTerm
entryRuleRealTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRealTermRule()); }
	 iv_ruleRealTerm=ruleRealTerm 
	 { $current=$iv_ruleRealTerm.current; } 
	 EOF 
;

// Rule RealTerm
ruleRealTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRealTermAccess().getValueSignedRealParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleSignedReal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"SignedReal");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRealTermRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRealTermAccess().getUnitUnitLiteralCrossReference_1_0()); 
	}

)
)?)
;





// Entry rule entryRuleSignedReal
entryRuleSignedReal returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSignedRealRule()); } 
	 iv_ruleSignedReal=ruleSignedReal 
	 { $current=$iv_ruleSignedReal.current.getText(); }  
	 EOF 
;

// Rule SignedReal
ruleSignedReal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedRealAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedRealAccess().getHyphenMinusKeyword_0_1()); 
    }
)?    this_REAL_LIT_2=RULE_REAL_LIT    {
		$current.merge(this_REAL_LIT_2);
    }

    { 
    newLeafNode(this_REAL_LIT_2, grammarAccess.getSignedRealAccess().getREAL_LITTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleNumericRangeTerm
entryRuleNumericRangeTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNumericRangeTermRule()); }
	 iv_ruleNumericRangeTerm=ruleNumericRangeTerm 
	 { $current=$iv_ruleNumericRangeTerm.current; } 
	 EOF 
;

// Rule NumericRangeTerm
ruleNumericRangeTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getMinimumNumAltParserRuleCall_0_0()); 
	    }
		lv_minimum_0_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"minimum",
        		lv_minimum_0_0, 
        		"NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=FullStopFullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getNumericRangeTermAccess().getFullStopFullStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getMaximumNumAltParserRuleCall_2_0()); 
	    }
		lv_maximum_2_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"maximum",
        		lv_maximum_2_0, 
        		"NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Delta
    {
    	newLeafNode(otherlv_3, grammarAccess.getNumericRangeTermAccess().getDeltaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getDeltaNumAltParserRuleCall_3_1_0()); 
	    }
		lv_delta_4_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"delta",
        		lv_delta_4_0, 
        		"NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNumAlt
entryRuleNumAlt returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNumAltRule()); }
	 iv_ruleNumAlt=ruleNumAlt 
	 { $current=$iv_ruleNumAlt.current; } 
	 EOF 
;

// Rule NumAlt
ruleNumAlt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getRealTermParserRuleCall_0()); 
    }
    this_RealTerm_0=ruleRealTerm
    {
        $current = $this_RealTerm_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getIntegerTermParserRuleCall_1()); 
    }
    this_IntegerTerm_1=ruleIntegerTerm
    {
        $current = $this_IntegerTerm_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getSignedConstantParserRuleCall_2()); 
    }
    this_SignedConstant_2=ruleSignedConstant
    {
        $current = $this_SignedConstant_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getConstantValueParserRuleCall_3()); 
    }
    this_ConstantValue_3=ruleConstantValue
    {
        $current = $this_ConstantValue_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleINTVALUE
entryRuleINTVALUE returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getINTVALUERule()); } 
	 iv_ruleINTVALUE=ruleINTVALUE 
	 { $current=$iv_ruleINTVALUE.current.getText(); }  
	 EOF 
;

// Rule INTVALUE
ruleINTVALUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_INTEGER_LIT_0=RULE_INTEGER_LIT    {
		$current.merge(this_INTEGER_LIT_0);
    }

    { 
    newLeafNode(this_INTEGER_LIT_0, grammarAccess.getINTVALUEAccess().getINTEGER_LITTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleQCLREF
entryRuleQCLREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQCLREFRule()); } 
	 iv_ruleQCLREF=ruleQCLREF 
	 { $current=$iv_ruleQCLREF.current.getText(); }  
	 EOF 
;

// Rule QCLREF
ruleQCLREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQCLREFAccess().getIDTerminalRuleCall_0()); 
    }

	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCLREFAccess().getColonColonKeyword_1()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQCLREFAccess().getIDTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleQPREF
entryRuleQPREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQPREFRule()); } 
	 iv_ruleQPREF=ruleQPREF 
	 { $current=$iv_ruleQPREF.current.getText(); }  
	 EOF 
;

// Rule QPREF
ruleQPREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQPREFAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQPREFAccess().getColonColonKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQPREFAccess().getIDTerminalRuleCall_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleQCREF
entryRuleQCREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQCREFRule()); } 
	 iv_ruleQCREF=ruleQCREF 
	 { $current=$iv_ruleQCREF.current.getText(); }  
	 EOF 
;

// Rule QCREF
ruleQCREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_0_0()); 
    }

	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCREFAccess().getColonColonKeyword_0_1()); 
    }
)*    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCREFAccess().getFullStopKeyword_2_0()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_2_1()); 
    }
)?)
    ;





// Entry rule entryRuleSTAR
entryRuleSTAR returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSTARRule()); } 
	 iv_ruleSTAR=ruleSTAR 
	 { $current=$iv_ruleSTAR.current.getText(); }  
	 EOF 
;

// Rule STAR
ruleSTAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=Asterisk 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTARAccess().getAsteriskKeyword()); 
    }

    ;





